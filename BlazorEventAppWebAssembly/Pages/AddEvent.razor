@page "/add-event"
@using BlazorEventAppWebAssembly.Models
@using BlazorEventAppWebAssembly.Services
@using System.ComponentModel.DataAnnotations
@inject EventService EventService
@inject NavigationManager Navigation

<PageTitle>Add Event</PageTitle>

<h3>Add a New Event</h3>

@if (validationErrors != null && validationErrors.Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<EditForm Model="@newEvent" OnValidSubmit="HandleValidSubmit">
    @* <DataAnnotationsValidator /> *@
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newEvent.Name" />
    </div>
    <div class="mb-3">
        <label for="location" class="form-label">Location</label>
        <InputText id="location" class="form-control" @bind-Value="newEvent.Location" />
    </div>
    <div class="mb-3">
        <label for="startDate" class="form-label">Start Date and Time</label>
        <InputDate id="startDate" class="form-control" @bind-Value="newEvent.StartDate" Type="InputDateType.DateTimeLocal" />
    </div>
    <div class="mb-3">
        <label for="endDate" class="form-label">End Date and Time</label>
        <InputDate id="endDate" class="form-control" @bind-Value="newEvent.EndDate" Type="InputDateType.DateTimeLocal" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newEvent.Description" />
    </div>
    <div class="mb-3">
        <label for="eventType" class="form-label">Event Type</label>
        <InputSelect id="eventType" class="form-control" @bind-Value="newEvent.EventType">
            <option value="">Select an event type</option>
            @foreach (var eventType in Enum.GetValues(typeof(EventType)))
            {
                <option value="@eventType">@eventType</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Add Event</button>
</EditForm>

@code {
    private Event newEvent = new Event();
    private List<string> validationErrors = new List<string>();

    private async Task HandleValidSubmit()
    {
        var context = new ValidationContext(newEvent);
        var results = new List<ValidationResult>();
        validationErrors.Clear();

        if (!Validator.TryValidateObject(newEvent, context, results, true))
        {
            validationErrors.AddRange(results.Select(r => r.ErrorMessage));
            return;
        }

        await EventService.AddEvent(newEvent);
        newEvent = new Event();
        Navigation.NavigateTo("/events");
    }
}
