@page "/events"
@using BlazorEventAppWebAssembly.Models
@using BlazorEventAppWebAssembly.Services
@using Microsoft.AspNetCore.Components.QuickGrid

@inject EventService EventService
@inject NavigationManager Navigation

<PageTitle>Events</PageTitle>

<h1>Upcoming Events</h1>

<button class="btn btn-primary" @onclick="NavigateToAddEvent">Add Event</button>

@if (events == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="events.AsQueryable()" TGridItem="Models.Event">
        <PropertyColumn Property="@(e => e.Name)" Title="Name" Sortable="true"/>
        <PropertyColumn Property="@(e => e.Location)" Title="Location" Sortable="true"/>
        <PropertyColumn Property="@(e => e.StartDate.ToString("g"))" Title="Start Date" Sortable="true" />
        <PropertyColumn Property="@(e => e.EndDate.ToString("g"))" Title="End Date" Sortable="true" />
        <PropertyColumn Property="@(e => e.Description)" Title="Description" Sortable="true" />
        <PropertyColumn Property="@(e => e.EventType)" Title="Event Type" Sortable="true" />
        <PropertyColumn Property="@(e => e.IsConfirmed ? "Confirmed" : "Not Confirmed")" Title="Status" Sortable="true" />
        <TemplateColumn Title="Actions">
            <div class="btn-group">
                <button class="btn btn-secondary" @onclick="() => NavigateToEditEvent(context)">Edit</button>
                <button class="btn btn-danger" @onclick="() => ConfirmDeleteEvent(context)">Delete</button>
                <button class="btn btn-success" @onclick="() => ConfirmEvent(context)" disabled="@context.IsConfirmed">Confirm</button>
            </div>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    private List<Event>? events;

    protected override async Task OnInitializedAsync() => events = await EventService.GetFutureEvents();

    private void NavigateToAddEvent()
    {
        Navigation.NavigateTo("/add-event");
    }

    private void NavigateToEditEvent(Event selectedEvent)
    {
        Navigation.NavigateTo($"/edit-event/{selectedEvent.Id}");
    }

    private async Task ConfirmDeleteEvent(Event selectedEvent)
    {
//        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
//        if (confirmed)
        {
            await EventService.DeleteEvent(selectedEvent.Id);
            events = await EventService.GetFutureEvents();
        }
    }

    private async Task ConfirmEvent(Event selectedEvent)
    {
        await EventService.ConfirmEvent(selectedEvent.Id);
        events = await EventService.GetFutureEvents();
    }
}
